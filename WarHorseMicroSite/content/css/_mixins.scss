@import '_colours.scss';

// Breakpoints for responsive design 

@mixin bp-large {
  @media only screen and (max-width: 60em) {
    @content;
  }
}

@mixin bp-medium {
  @media only screen and (max-width: 40em) {
    @content;
  }
}

@mixin bp-padPortrait {
  @media only screen and (max-width: 980px) {
    @content;
  }
}

@mixin bp-small {
  @media only screen and (max-width: 30em) {
    @content;
  }
}

@mixin alpha-attribute($attribute, $color, $background) {
  $percent: alpha($color) * 100%;
  $opaque: opacify($color, 1);
  $solid-color: mix($opaque, $background, $percent);
  #{$attribute}: $solid-color;
  #{$attribute}: $color;
}

@mixin modal(){
    position: fixed;
    z-index: 99;
    width: 100%; 
    height: 100%; 
    @include alpha-attribute('background-color', rgba(black, 0.5), white);
}

@mixin gradient($firstcolour, $secondcolour) {
                    background: -webkit-linear-gradient(left top, $firstcolour, $secondcolour);
                    /* For Safari 5.1 to 6.0 */
                    background: -o-linear-gradient(bottom right, $firstcolour, $secondcolour); /* For Opera 11.1 to 12.0 */
                    background: -moz-linear-gradient(bottom right, $firstcolour, $secondcolour); /* For Firefox 3.6 to 15 */
                    background: linear-gradient(to bottom right, $firstcolour, $secondcolour); /* Standard syntax */
                   }

@mixin rotate( $degrees ) {
  -webkit-transform: rotate(#{$degrees}deg);
  -moz-transform: rotate(#{$degrees}deg);
  -ms-transform: rotate(#{$degrees}deg);
  -o-transform: rotate(#{$degrees}deg);
  transform: rotate(#{$degrees}deg);

  filter:  progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=#{cos($degrees)}, M12=-#{sin($degrees)}, M21=#{sin($degrees)}, M22=#{cos($degrees)});
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=#{cos($degrees)}, M12=-#{sin($degrees)}, M21=#{sin($degrees)}, M22=#{cos($degrees)})";
  zoom: 1;
 }

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
}

@mixin drop-shadow($bool) {
    @if ($bool) {
        -moz-box-shadow:    3px 3px 5px 6px lighten($base-colour, 30%);
        -webkit-box-shadow: 3px 3px 5px 6px lighten($base-colour, 30%);
        box-shadow:         3px 3px 5px 6px lighten($base-colour, 30%);
    }
   @else {
        -moz-box-shadow: none; 
        -webkit-box-shadow: none;
       box-shadow: none;
   }
}

@mixin filter($filter-type,$filter-amount) { 
  -webkit-filter: $filter-type+unquote('(#{$filter-amount})');
  -moz-filter: $filter-type+unquote('(#{$filter-amount})');
  -ms-filter: $filter-type+unquote('(#{$filter-amount})');
  -o-filter: $filter-type+unquote('(#{$filter-amount})');
  filter: $filter-type+unquote('(#{$filter-amount})');
}

// FONT AWESOME Mixins
// --------------------------

@mixin fa-icon() {
  display: inline-block;
  font: normal normal normal 14px/1 FontAwesome; // shortening font declaration
  font-size: inherit; // can't have font-size inherit on line above, so need to override
  text-rendering: auto; // optimizelegibility throws things off #1094
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@mixin fa-icon-rotate($degrees, $rotation) {
  filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=#{$rotation});
  -webkit-transform: rotate($degrees);
      -ms-transform: rotate($degrees);
          transform: rotate($degrees);
}

@mixin fa-icon-flip($horiz, $vert, $rotation) {
  filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=#{$rotation});
  -webkit-transform: scale($horiz, $vert);
      -ms-transform: scale($horiz, $vert);
          transform: scale($horiz, $vert);
}

// 
// --------------------------